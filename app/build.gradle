apply plugin: 'com.android.application'

def appManifest = [
        applicationId: "biz.playr",
        name: 'Playr', // The name shown on the Android Launcher.
        versionName: "3.0.2",
        //////////////////////////////////////////////////////////////////////////
        // new versionCode scheme is necessary since we might have to update the
        // app that uses minSdkVersion 19, versionCode needs to increase for the
        // OS to install the update
        //////////////////////////////////////////////////////////////////////////
        // new versionCode scheme: targetSdkVersion minSdkVersion app version
        // example:
        // for old devices 3619248 => 36 19 2(.9.8.1) 48 (old version code)
        // for new devices 3621302 => 36 21 3.0.2
        // See: https://developer.android.com/google/play/publishing/multiple-apks#VersionCodes
        // A simpler scheme is also possible (all future 2.x releases number up from where
        // they are until 99, all 3.x and higher versions use 100 and up)
        // Since it is unsure if we need to release updates to the older version of the app,
        // that uses API level 19 (and will not be updated by the OS when we release this version
        // of the app) and if that is possible by releasing a version of the app with a versionCode
        // higher than 48 and min. API level 19 we will use a simpler versionCode for now, one that
        // leaves enough "space" for possible updates to the "old" version of the app (with level 19
        // support) ie we make the versioncode 302 and up for the new version and have versionCode
        // 49-299 for the "old" version
        versionCode: 302,
        themeColor: '#303F9F', // The color used for the status bar.
        navigationColor: '#303F9F', // The color used for the navigation bar.
        backgroundColor: '#bababa', // The color used for the splash screen background.
        enableNotifications: false, // Set to true to enable notification delegation.
        // Add shortcuts for your app here. Every shortcut must include the following fields:
        // - name: String that will show up in the shortcut.
        // - short_name: Shorter string used if |name| is too long.
        // - url: Absolute path of the URL to launch the app with (e.g '/create').
        // - icon: Name of the resource in the drawable folder to use as an icon.
        shortcuts: [
                // Insert shortcuts here, for example:
                // [name: 'Open SVG', short_name: 'Open', url: '/open', icon: 'splash']
        ],
        // The duration of fade out animation in milliseconds to be played when removing splash screen.
        splashScreenFadeOutDuration: 300
]

def twaManifest = [
        hostName: 'www.playr.biz', // The domain being opened in the TWA.
        launchUrl: '/play', // The start path for the TWA. Must be relative to the domain.
]

allprojects {
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

android {
    compileSdk = 36
    namespace = 'biz.playr'

    defaultConfig {
        applicationId = appManifest.applicationId
        versionCode = appManifest.versionCode
        versionName = appManifest.versionName
        minSdkVersion 21
        targetSdkVersion 36

        // The name for the application on the Android Launcher
        resValue "string", "appName", appManifest.name

        // The name for the application on the Android Launcher
        resValue "string", "versionName", appManifest.versionName

        // The URL that will be used when launching the TWA from the Android Launcher
        def launchUrl = "http://" + twaManifest.hostName + twaManifest.launchUrl + "?app_version=" + appManifest.versionName
        resValue "string", "launchUrl", launchUrl

        // The URL that will be opened as a Desktop PWA when the TWA is installed and
        // run on ChromeOS. This will probably give a better user experience for non-mobile
        // devices, but will not include any native Android interaction.
        resValue "string", "crosLaunchUrl", launchUrl

        // The hostname is used when building the intent-filter, so the TWA is able to
        // handle Intents to open the launchUrl
        resValue "string", "hostName", twaManifest.hostName

        // This variable below expresses the relationship between the app and the site,
        // as documented in the TWA documentation at
        // https://developers.google.com/web/updates/2017/10/using-twa#set_up_digital_asset_links_in_an_android_app
        // and is injected into the AndroidManifest.xml
        resValue "string", "assetStatements", """
            [{
                "relation": ["delegate_permission/common.handle_all_urls"],
                "target": {
                    "namespace": "web",
                    "site": "http://$twaManifest.hostName"
                }
            }]"""
        // To get the .well-known/assetlinks.json set up so this app can be verified (and the URL bar is removed)
        // see: https://developers.google.com/digital-asset-links/v1/getting-started
        // and: https://developers.google.com/web/android/trusted-web-activity/integration-guide

        // This attribute sets the status bar color for the TWA. It can be either set here or in
        // `res/values/colors.xml`. Setting in both places is an error and the app will not
        // compile. If not set, the status bar color defaults to #FFFFFF - white.
//        resValue "color", "colorPrimary", appManifest.themeColor

        // This attribute sets the navigation bar color for the TWA. It can be either set here or in
        // `res/values/colors.xml`. Setting in both places is an error and the app will not
        // compile. If not set, the navigation bar color defaults to #FFFFFF - white.
//        resValue "color", "navigationColor", appManifest.navigationColor

        // Sets the color for the background used for the splash screen when launching the
        // Trusted Web Activity.
//        resValue "color", "backgroundColor", appManifest.backgroundColor

        // Defines a provider authority fot the Splash Screen
//        resValue "string", "providerAuthority", appManifest.applicationId + '.fileprovider'

        // The enableNotification resource is used to enable or disable the
        // TrustedWebActivityService, by changing the android:enabled and android:exported
        // attributes
//        resValue "bool", "enableNotification", appManifest.enableNotifications.toString()

//        appManifest.shortcuts.eachWithIndex { shortcut, index ->
//            resValue "string", "shortcut_name_$index", "$shortcut.name"
//            resValue "string", "shortcut_short_name_$index", "$shortcut.short_name"
//        }

        // The splashScreenFadeOutDuration resource is used to set the duration of fade out animation in milliseconds
        // to be played when removing splash screen. The default is 0 (no animation).
//        resValue "integer", "splashScreenFadeOutDuration", appManifest.splashScreenFadeOutDuration.toString()

    }
    configurations {
        configureEach {
            exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib-jdk8"
        }
    }
    // The resource values auto_start and restart can be accessed in the Java code by calling
    // context.getResources().getBoolean(R.bool.auto_start)
    // Setting auto_start to true will make the application start automatically when the device is
    // started for professional displays this might interfere with the functionality to start a
    // specific application when the device is turned on. That is why this resource is set to false
    // for the ProDisplay build
    // Setting restart will cause the app to try to relaunch itself after 30 seconds when it is
    // closed (by the user or system (after an exception) since this can lead to unwanted loops
    // this is also set to false in the ProDisplay build
    // NB: The restart option does not influence the restart that the watchdog issues since that is
    // done deliberately. It can turn out that setting the restart option to false is also a better
    // default for the normal build
    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue "bool", "auto_start", "true"
            resValue "bool", "restart", "true"
        }
        releaseProDisplay {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            resValue "bool", "auto_start", "false"
            resValue "bool", "restart", "false"
            resValue "string", "appName", appManifest.name + "ForProDisplay"
        }
        debug {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            jniDebuggable true
            renderscriptDebuggable true
            renderscriptOptimLevel = 3
            signingConfig = signingConfigs.debug
            resValue "bool", "auto_start", "false"
            resValue "bool", "restart", "false"
            resValue "string", "appName", appManifest.name + "ForDebugDisplay"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.leanback:leanback:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.webkit:webkit:1.14.0'
//    implementation 'androidx.browser:browser:1.2.0'
    implementation 'androidx.preference:preference:1.2.1'
//    implementation 'androidx.core:core:1.13.1'

    // From TwaDemoJava demo project (also including maven
    // in the build.gradle in the /gradle folder to enable
    // inclusion of code from GitHub)
    implementation 'androidx.appcompat:appcompat:1.7.1'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    implementation 'com.google.android.material:material:1.1.0'
//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'androidx.test:runner:1.1.1'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    // GITHUB customtabs version
//    implementation 'com.github.GoogleChrome.custom-tabs-client:customtabs:d08e93fce3fb3e1f22214ee2f23fddc4f4e92634'
    implementation 'com.github.GoogleChrome.custom-tabs-client:customtabs:master'
//    implementation 'androidx.browser:browser:1.3.0'
}
